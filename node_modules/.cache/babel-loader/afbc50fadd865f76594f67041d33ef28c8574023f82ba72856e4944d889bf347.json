{"ast":null,"code":"var _jsxFileName = \"/home/crab/json2table/react/json-tables-viewer/src/components/JsonTableView.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JsonTableView = ({\n  data,\n  loading,\n  error\n}) => {\n  const renderTable = () => {\n    if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\u0414\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043D\\u0435 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 23\n    }, this);\n    try {\n      // Если данные - массив\n      if (Array.isArray(data)) {\n        if (data.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-data\",\n          children: \"\\u041C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u043F\\u0443\\u0441\\u0442\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 39\n        }, this);\n        const headers = Object.keys(data[0] || {});\n        return /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"windows-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: headers.map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: key\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 18,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: headers.map(key => {\n                var _item$key;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: typeof item[key] === 'object' ? JSON.stringify(item[key]) : String((_item$key = item[key]) !== null && _item$key !== void 0 ? _item$key : '')\n                }, `${index}-${key}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 26,\n                  columnNumber: 21\n                }, this);\n              })\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this);\n      }\n\n      // Если данные - объект\n      if (typeof data === 'object' && data !== null) {\n        return /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"windows-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.entries(data).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: key\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: typeof value === 'object' ? JSON.stringify(value) : String(value !== null && value !== void 0 ? value : '')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 19\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this);\n      }\n\n      // Простые типы данных\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"simple-data\",\n        children: String(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 14\n      }, this);\n    } catch (err) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043E\\u0442\\u0440\\u0438\\u0441\\u043E\\u0432\\u043A\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-content\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), renderTable()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_c = JsonTableView;\nexport default JsonTableView;\nvar _c;\n$RefreshReg$(_c, \"JsonTableView\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","JsonTableView","data","loading","error","renderTable","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","length","headers","Object","keys","map","key","item","index","_item$key","JSON","stringify","String","entries","value","err","_c","$RefreshReg$"],"sources":["/home/crab/json2table/react/json-tables-viewer/src/components/JsonTableView.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst JsonTableView = ({ data, loading, error }) => {\r\n  const renderTable = () => {\r\n    if (!data) return <div className=\"no-data\">Данные не загружены</div>;\r\n    \r\n    try {\r\n      // Если данные - массив\r\n      if (Array.isArray(data)) {\r\n        if (data.length === 0) return <div className=\"no-data\">Массив пуст</div>;\r\n        \r\n        const headers = Object.keys(data[0] || {});\r\n        return (\r\n          <table className=\"windows-table\">\r\n            <thead>\r\n              <tr>\r\n                {headers.map(key => (\r\n                  <th key={key}>{key}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.map((item, index) => (\r\n                <tr key={index}>\r\n                  {headers.map(key => (\r\n                    <td key={`${index}-${key}`}>\r\n                      {typeof item[key] === 'object' \r\n                        ? JSON.stringify(item[key]) \r\n                        : String(item[key] ?? '')}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        );\r\n      }\r\n      \r\n      // Если данные - объект\r\n      if (typeof data === 'object' && data !== null) {\r\n        return (\r\n          <table className=\"windows-table\">\r\n            <tbody>\r\n              {Object.entries(data).map(([key, value]) => (\r\n                <tr key={key}>\r\n                  <th>{key}</th>\r\n                  <td>\r\n                    {typeof value === 'object' \r\n                      ? JSON.stringify(value) \r\n                      : String(value ?? '')}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        );\r\n      }\r\n      \r\n      // Простые типы данных\r\n      return <div className=\"simple-data\">{String(data)}</div>;\r\n    } catch (err) {\r\n      return <div className=\"error-message\">Ошибка отрисовки данных</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tab-content\">\r\n      {loading && <div className=\"loading\">Загрузка...</div>}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      {renderTable()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JsonTableView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/crab/json2table/react/json-tables-viewer/src/components/JsonTableView.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JsonTableView = ({\n  endpoint,\n  baseUrl,\n  data,\n  loading,\n  error\n}) => {\n  const renderTable = () => {\n    if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 URL \\u0438 \\u043D\\u0430\\u0436\\u043C\\u0438\\u0442\\u0435 \\\"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 23\n    }, this);\n    if (Array.isArray(data)) {\n      const headers = {};\n      data.forEach(item => {\n        if (typeof item === 'object' && item !== null) {\n          Object.keys(item).forEach(key => {\n            headers[key] = true;\n          });\n        }\n      });\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"windows-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.keys(headers).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: key\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.keys(headers).map(key => {\n              var _item$key;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: typeof item[key] === 'object' ? JSON.stringify(item[key]) : String((_item$key = item[key]) !== null && _item$key !== void 0 ? _item$key : '')\n              }, `${index}-${key}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 19\n              }, this);\n            })\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"windows-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Object.entries(data).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: typeof value === 'object' ? JSON.stringify(value) : String(value !== null && value !== void 0 ? value : '')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-content\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this), renderTable()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_c = JsonTableView;\nexport default JsonTableView;\nvar _c;\n$RefreshReg$(_c, \"JsonTableView\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","JsonTableView","endpoint","baseUrl","data","loading","error","renderTable","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","headers","forEach","item","Object","keys","key","map","index","_item$key","JSON","stringify","String","entries","value","_c","$RefreshReg$"],"sources":["/home/crab/json2table/react/json-tables-viewer/src/components/JsonTableView.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst JsonTableView = ({ endpoint, baseUrl, data, loading, error }) => {\r\n  const renderTable = () => {\r\n    if (!data) return <div className=\"no-data\">Введите URL и нажмите \"Загрузить\"</div>;\r\n    \r\n    if (Array.isArray(data)) {\r\n      const headers = {};\r\n      data.forEach(item => {\r\n        if (typeof item === 'object' && item !== null) {\r\n          Object.keys(item).forEach(key => {\r\n            headers[key] = true;\r\n          });\r\n        }\r\n      });\r\n      \r\n      return (\r\n        <table className=\"windows-table\">\r\n          <thead>\r\n            <tr>\r\n              {Object.keys(headers).map(key => (\r\n                <th key={key}>{key}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((item, index) => (\r\n              <tr key={index}>\r\n                {Object.keys(headers).map(key => (\r\n                  <td key={`${index}-${key}`}>\r\n                    {typeof item[key] === 'object' \r\n                      ? JSON.stringify(item[key]) \r\n                      : String(item[key] ?? '')}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <table className=\"windows-table\">\r\n        <tbody>\r\n          {Object.entries(data).map(([key, value]) => (\r\n            <tr key={key}>\r\n              <th>{key}</th>\r\n              <td>\r\n                {typeof value === 'object' \r\n                  ? JSON.stringify(value) \r\n                  : String(value ?? '')}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"tab-content\">\r\n      {loading && <div className=\"loading\">Загрузка...</div>}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      {renderTable()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JsonTableView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}